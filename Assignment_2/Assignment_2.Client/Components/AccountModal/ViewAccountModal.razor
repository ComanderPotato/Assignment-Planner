 @inject ApplicationState ApplicationState
 @inject NavigationManager NavigationManager
@if (ApplicationState.CurrentUser != null)
{

    <div class="form-body">
        <div class="form-input--group">
            <label class="form-label" for="">First Name</label>
            <span class="form-span">@ApplicationState.CurrentUser.FirstName</span>

        </div>
        <div class="form-input--group">
            <label class="form-label" for="">Surname</label>


            <span class="form-span">@ApplicationState.CurrentUser.Surname</span>

        </div>
        <div class="form-input--group">
            <label class="form-label" for="">Email</label>


            <span class="form-span">@ApplicationState.CurrentUser.Email</span>


        </div>
        <div class="form-input--group">
            <label class="form-label" for="">Password</label>

            <span class="form-span">@ApplicationState.CurrentUser.Password</span>
        </div>
        <div>
            <CustomButton Type="button" Class="form-btn secondary-btn" OnClick="HandleLogout">
                Logout
            </CustomButton>
        </div>

        <div class="form-btns">

            <CustomButton Type="button" Class="form-btn secondary-btn" OnClick="() => HandleModalStateChange(ModalState.EditAccount)">
                Edit
            </CustomButton>
        </div>
    </div>
}
@code {
    [Parameter]
    public EventCallback<ModalState> OnModalStateChange { get; set; }
    [Parameter]
    public EventCallback OnLogout { get; set; }

    private void HandleLogout()
    {
        OnLogout.InvokeAsync();
    }
    private void HandleModalStateChange(ModalState modalState)
    {
        OnModalStateChange.InvokeAsync(modalState);
    }
}
