@page "/home"
@inject IUserService UserService;
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<EditForm Model="newUser" OnSubmit="HandleValidSubmit" FormName="addUser">

    <div>
        <label for="firstName">First Name:</label>
        <InputText id="firstName" @bind-Value="newUser.FirstName">@newUser.FirstName</InputText>
    </div>

    <div>
        <label for="surname">Surname:</label>
        <InputText id="surname" @bind-Value="newUser.Surname">@newUser.Surname</InputText>
    </div>

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="newUser.Email">@newUser.Email</InputText>
    </div>

    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="newUser.Password" type="password">@newUser.Password</InputText>
    </div>

    <button type="submit">Add User</button>
</EditForm>


@if(users == null || users.Count == 0)
{
    <span>Suck egg</span>
} else
{
    <ul>
        @foreach(var user in users)
        {
            <li>@user.FirstName</li>
        }
    </ul>
}

@code {
    List<User> users = new List<User>();
    User newUser = new User { FirstName = string.Empty, Surname = string.Empty, Email = string.Empty, Password = string.Empty };
    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAllUsers();
    }


    private async Task HandleValidSubmit()
    {
        
        await UserService.AddUser(newUser);
        newUser = new User { FirstName = string.Empty, Surname = string.Empty, Email = string.Empty, Password = string.Empty };
        users = await UserService.GetAllUsers();
    }
}